import fetchModule from './fetch.js';
import { stringify } from "query-string";
class StructuredError extends Error {
    constructor(message, status = '', requestId = '') {
        super(message);
        this.status = status;
        this.request_id = requestId;
    }
}
export const getWithGlobals = (apiKey, apiBase, globalOptions = {}) => async (path, query = {}, options = {}) => {
    if (!apiKey) {
        throw new Error("API KEY not configured...");
    }
    const queryString = stringify(query, { encode: true });
    const url = `${apiBase}${path}?${queryString}`;
    try {
        const response = await fetchModule.fetch(url, {
            ...globalOptions,
            ...options,
            headers: {
                ...(options.headers || globalOptions.headers || {}),
                "Authorization": `Bearer ${apiKey}`
            }
        });
        if (response.status >= 400) {
            const rawMessage = await response.text();
            let error;
            try {
                // first try parsing JSON from the response
                const json = JSON.parse(rawMessage);
                error = new StructuredError(json.message, json.status, json.request_id);
            }
            catch (e) {
                // default to sending a string error message
                error = new Error(rawMessage);
            }
            throw error;
        }
        if (response?.headers?.get('content-type') === 'text/csv') {
            return response.text();
        }
        return response.json();
    }
    catch (e) {
        throw e;
    }
};
