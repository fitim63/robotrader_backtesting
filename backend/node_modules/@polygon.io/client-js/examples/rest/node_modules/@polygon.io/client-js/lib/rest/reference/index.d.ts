import { IPolygonQuery, IRequestOptions } from "../transport/request.js";
import { IConditionsQuery, IConditions } from "./conditions.js";
import { IExchangesQuery, IExchanges } from "./exchanges.js";
import { IMarketHoliday } from "./marketHolidays.js";
import { IMarketStatus } from "./marketStatus.js";
import { IOptionsContractQuery, IOptionsContract } from "./optionsContract.js";
import { IOptionsContractsQuery, IOptionsContracts } from "./optionsContracts.js";
import { IDividendsResults, IDividendsQuery } from "./dividends.js";
import { IStockSplitsResults, IStockSplitsQuery } from "./stockSplits.js";
import { IStockFinancialResults, IStockFinancialQuery } from "./stockFinancials.js";
import { ITickerDetails } from "./tickerDetails.js";
import { ITickerNews, ITickerNewsQuery } from "./tickerNews.js";
import { ITickers, ITickersQuery } from "./tickers.js";
import { ITickerTypes, ITickerTypesQuery } from "./tickerTypes.js";
export { IConditions } from "./conditions.js";
export { IExchanges } from "./exchanges.js";
export { IMarketHoliday } from "./marketHolidays.js";
export { IMarketStatus } from "./marketStatus.js";
export { IDividendsResults } from "./dividends.js";
export { IStockSplitsResults } from "./stockSplits.js";
export { IStockFinancialResults } from "./stockFinancials.js";
export { ITickerDetails } from "./tickerDetails.js";
export { ITickerNews, ITickerNewsQuery } from "./tickerNews.js";
export { ITickers, ITickersQuery } from "./tickers.js";
export { ITickerTypes, ITickerTypesQuery } from "./tickerTypes.js";
export interface IReferenceClient {
    conditions: (query?: IConditionsQuery, options?: IRequestOptions) => Promise<IConditions>;
    exchanges: (query?: IExchangesQuery, options?: IRequestOptions) => Promise<IExchanges>;
    marketHolidays: (query?: IPolygonQuery, options?: IRequestOptions) => Promise<IMarketHoliday[]>;
    marketStatus: (query?: IPolygonQuery, options?: IRequestOptions) => Promise<IMarketStatus>;
    optionsContract: (optionsTicker: string, query?: IOptionsContractQuery, options?: IRequestOptions) => Promise<IOptionsContract>;
    optionsContracts: (query?: IOptionsContractsQuery, options?: IRequestOptions) => Promise<IOptionsContracts>;
    dividends: (query?: IDividendsQuery, options?: IRequestOptions) => Promise<IDividendsResults>;
    stockSplits: (query?: IStockSplitsQuery, options?: IRequestOptions) => Promise<IStockSplitsResults>;
    stockFinancials: (query?: IStockFinancialQuery, options?: IRequestOptions) => Promise<IStockFinancialResults>;
    tickerDetails: (symbol: string, query?: IPolygonQuery, options?: IRequestOptions) => Promise<ITickerDetails>;
    tickerNews: (query?: ITickerNewsQuery, options?: IRequestOptions) => Promise<ITickerNews>;
    tickers: (query?: ITickersQuery, options?: IRequestOptions) => Promise<ITickers>;
    tickerTypes: (query?: ITickerTypesQuery, options?: IRequestOptions) => Promise<ITickerTypes>;
}
export declare const referenceClient: (apiKey: string, apiBase?: string, options?: IRequestOptions) => IReferenceClient;
export default referenceClient;
