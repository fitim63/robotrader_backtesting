import { IPolygonQuery, IRequestOptions } from "../transport/request.js";
import { IAggsQuery, IAggs } from "../stocks/aggregates.js";
import { IDailyOpenCloseQuery, IDailyOpenClose } from "../stocks/dailyOpenClose.js";
import { IAggsPreviousCloseQuery, IAggsPreviousClose } from "../stocks/previousClose.js";
import { IIndexSnapshot } from "../indices/snapshots.js";
import { ISma, ITechnicalIndicatorsQuery } from "../stocks/sma.js";
import { IEma } from "../stocks/ema.js";
import { IMacd } from "../stocks/macd.js";
import { IRsi } from "../stocks/rsi.js";
export { IAggsQuery, IAggs } from "../stocks/aggregates.js";
export { IAggsGroupedDailyQuery, IAggsGroupedDaily, } from "../stocks/aggregatesGroupedDaily.js";
export { IDailyOpenCloseQuery, IDailyOpenClose } from "../stocks/dailyOpenClose.js";
export { IAggsPreviousCloseQuery, IAggsPreviousClose } from "../stocks/previousClose.js";
export { ILastQuote } from "../stocks/lastQuote.js";
export { ILastTrade } from "../stocks/lastTrade.js";
export { ISnapshotAllTickersQuery, ISnapshotTickers, ISnapshot, } from "../stocks/snapshots.js";
export { IQuotes } from "../stocks/quotes.js";
export { ITradesQuotesQuery, ITrades } from "../stocks/trades.js";
export { ISummariesQuery, ISummaries } from '../stocks/summaries.js';
export { ISma, ITechnicalIndicatorsQuery } from '../stocks/sma.js';
export { IEma } from '../stocks/ema.js';
export { IMacd } from '../stocks/macd.js';
export { IRsi } from '../stocks/rsi.js';
export interface IIndicesClient {
    aggregates: (ticker: string, multiplier: number, timespan: string, from: string, to: string, query?: IAggsQuery, options?: IRequestOptions) => Promise<IAggs>;
    dailyOpenClose: (symbol: string, date: string, query?: IDailyOpenCloseQuery, options?: IRequestOptions) => Promise<IDailyOpenClose>;
    previousClose: (ticker: string, query?: IAggsPreviousCloseQuery, options?: IRequestOptions) => Promise<IAggsPreviousClose>;
    snapshotTicker: (query?: IPolygonQuery, options?: IRequestOptions) => Promise<IIndexSnapshot>;
    sma: (symbol: string, query?: ITechnicalIndicatorsQuery, options?: IRequestOptions) => Promise<ISma>;
    ema: (symbol: string, query?: ITechnicalIndicatorsQuery, options?: IRequestOptions) => Promise<IEma>;
    macd: (symbol: string, query?: ITechnicalIndicatorsQuery, options?: IRequestOptions) => Promise<IMacd>;
    rsi: (symbol: string, query?: ITechnicalIndicatorsQuery, options?: IRequestOptions) => Promise<IRsi>;
}
export declare const indicesClient: (apiKey: string, apiBase?: string, options?: IRequestOptions) => IIndicesClient;
export default indicesClient;
