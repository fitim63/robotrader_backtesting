import { IPolygonQuery, IRequestOptions } from "../transport/request.js";
import { IAggsQuery, IAggs } from "../stocks/aggregates.js";
import { IAggsGroupedDaily, IAggsGroupedDailyQuery } from "../stocks/aggregatesGroupedDaily.js";
import { IAggsPreviousCloseQuery, IAggsPreviousClose } from "../stocks/previousClose.js";
import { ITradesQuotesQuery } from "../stocks/trades.js";
import { ICryptoDailyOpenCloseQuery, ICryptoDailyOpenClose } from "./dailyOpenClose.js";
import { ICryptoTrade } from "./trades.js";
import { ICryptoLastTrade } from "./lastTrade.js";
import { ICryptoSnapshotAllTickersQuery, ICryptoSnapshotTickers, ICryptoSnapshot, ICryptoSnapshotFullBookL2 } from "./snapshots.js";
import { ISummaries, ISummariesQuery } from "../stocks/summaries.js";
import { ITechnicalIndicatorsQuery } from "../stocks/sma.js";
import { ISma } from "./sma.js";
import { IEma } from "./ema.js";
import { IMacd } from "./macd.js";
import { IRsi } from "./rsi.js";
export { ICryptoDailyOpenCloseQuery, ICryptoDailyOpenClose, } from "./dailyOpenClose";
export { ICryptoTrade } from "./trades";
export { ICryptoLastTrade } from "./lastTrade";
export { ICryptoSnapshotAllTickersQuery, ICryptoSnapshotTickers, ICryptoSnapshot, ICryptoSnapshotFullBookL2, } from "./snapshots";
export { ISummariesQuery, ISummaries } from '../stocks/summaries';
export { ISma, ITechnicalIndicatorsQuery } from '../stocks/sma';
export { IEma } from '../stocks/ema';
export { IMacd } from '../stocks/macd';
export { IRsi } from '../stocks/rsi';
export interface ICryptoClient {
    aggregates: (ticker: string, multiplier: number, timespan: string, from: string, to: string, query?: IAggsQuery, options?: IRequestOptions) => Promise<IAggs>;
    aggregatesGroupedDaily: (date: string, query?: IAggsGroupedDailyQuery, options?: IRequestOptions) => Promise<IAggsGroupedDaily>;
    summaries: (query?: ISummariesQuery, options?: IRequestOptions) => Promise<ISummaries>;
    dailyOpenClose: (from: string, to: string, date: string, query?: ICryptoDailyOpenCloseQuery, options?: IRequestOptions) => Promise<ICryptoDailyOpenClose>;
    trades: (cryptoTicker: string, query?: ITradesQuotesQuery, options?: IRequestOptions) => Promise<ICryptoTrade>;
    lastTrade: (from: string, to: string, query?: IPolygonQuery, options?: IRequestOptions) => Promise<ICryptoLastTrade>;
    previousClose: (symbol: string, query?: IAggsPreviousCloseQuery, options?: IRequestOptions) => Promise<IAggsPreviousClose>;
    snapshotAllTickers: (query?: ICryptoSnapshotAllTickersQuery, options?: IRequestOptions) => Promise<ICryptoSnapshotTickers>;
    snapshotGainersLosers: (direction: "gainers" | "losers", query?: IPolygonQuery, options?: IRequestOptions) => Promise<ICryptoSnapshotTickers>;
    snapshotTicker: (symbol: string, query?: IPolygonQuery, options?: IRequestOptions) => Promise<ICryptoSnapshot>;
    snapshotTickerFullBookL2: (symbol: string, query?: IPolygonQuery, options?: IRequestOptions) => Promise<ICryptoSnapshotFullBookL2>;
    sma: (symbol: string, query?: ITechnicalIndicatorsQuery, options?: IRequestOptions) => Promise<ISma>;
    ema: (symbol: string, query?: ITechnicalIndicatorsQuery, options?: IRequestOptions) => Promise<IEma>;
    macd: (symbol: string, query?: ITechnicalIndicatorsQuery, options?: IRequestOptions) => Promise<IMacd>;
    rsi: (symbol: string, query?: ITechnicalIndicatorsQuery, options?: IRequestOptions) => Promise<IRsi>;
}
export declare const cryptoClient: (apiKey: any, apiBase?: string, options?: IRequestOptions) => ICryptoClient;
export default cryptoClient;
